# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  image: String
  slug: String!
  restaurants: [Restaurant!]
  restaurantCount: Float!
}

type OrderItemOption {
  name: String!
  choice: String
}

type OrderItem {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  dish: Dish!
  options: [OrderItemOption!]
}

type Order {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  customer: User
  deliver: User
  restaurant: Restaurant
  dishes: [OrderItem!]!
  totalPrice: Float
  status: OrderStatus!
}

enum OrderStatus {
  Pending
  Cooking
  PickedUp
  Delivered
}

type User {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  email: String!
  verified: Boolean!
  password: String!
  role: UserRole!
  restaurants: [Restaurant!]!
  orders: [Order!]!
  rides: [Order!]!
}

enum UserRole {
  client
  owner
  delivery
}

type Restaurant {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  coverImage: String!
  address: String!
  menu: [Dish!]!
  orders: [Order!]!
  category: Category
  user: User!
}

type DishChoice {
  name: String!
  extraPrice: Float
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extraPrice: Float
}

type Dish {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  price: Float!
  photo: String
  description: String
  restaurant: Restaurant!
  options: [DishOption!]
}

type AllCategoriesOutput {
  error: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  category: Category
}

type CreateDishOutput {
  error: String
  ok: Boolean!
  dish: Dish
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  restaurants: [Restaurant!]
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  restaurants: [Restaurant!]
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type UserOutput {
  error: String
  ok: Boolean!
  user: User
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type UpdateUserOutput {
  error: String
  ok: Boolean!
  user: User
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}

type CreateOrderOutput {
  error: String
  ok: Boolean!
}

type Query {
  getRestaurant(data: RestaurantInput!): RestaurantOutput!
  restaurants(data: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(data: SearchRestaurantInput!): SearchRestaurantOutput!
  allCategories: AllCategoriesOutput!
  getCategory(data: CategoryInput!): CategoryOutput!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  users: [User!]!
}

input RestaurantInput {
  restaurantId: Float!
}

input RestaurantsInput {
  page: Float = 1
}

input SearchRestaurantInput {
  page: Float = 1
  query: String!
}

input CategoryInput {
  page: Float = 1
  slug: String!
}

type Mutation {
  createRestaurant(data: CreateRestaurantInput!): CreateRestaurantOutput!
  updateRestaurant(id: Float!, data: UpdateRestaurantInput!): UpdateRestaurantOutput!
  deleteRestaurant(data: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDish(data: CreateDishInput!): CreateDishOutput!
  deleteDish(data: DeleteDishInput!): DeleteDishOutput!
  editDish(data: EditDishInput!): EditDishOutput!
  createUser(data: UserInput!): UserOutput!
  verifyEmail(data: VerifyEmailInput!): VerifyEmailOutput!
  login(data: LoginInput!): LoginOutput!
  updateUser(id: Float!, data: UpdateUserInputType!): UpdateUserOutput!
  createOrder(data: CreateOrderInput!): CreateOrderOutput!
}

input CreateRestaurantInput {
  name: String!
  coverImage: String!
  address: String!
  categoryName: String!
}

input UpdateRestaurantInput {
  name: String
  coverImage: String
  address: String
  categoryName: String
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  price: Float!
  photo: String
  description: String
  options: [DishOptionInputType!]
  restaurantId: Float!
}

input DishOptionInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extraPrice: Float
}

input DishChoiceInputType {
  name: String!
  extraPrice: Float
}

input DeleteDishInput {
  id: Float!
}

input EditDishInput {
  name: String
  price: Float
  photo: String
  description: String
  options: [DishOptionInputType!]
  dishId: Float!
}

input UserInput {
  email: String!
  password: String!
  role: UserRole!
}

input VerifyEmailInput {
  code: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInputType {
  email: String
  password: String
  role: UserRole
}

input CreateOrderInput {
  restaurantId: Float!
  dishes: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Float!
  options: [OrderItemOptionInputType!]
}

input OrderItemOptionInputType {
  name: String!
  choice: String
}
