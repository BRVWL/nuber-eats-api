# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  image: String
  slug: String!
  restaurants: [Restaurant!]
  restaurantCount: Float!
}

type User {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  email: String!
  verified: Boolean!
  password: String!
  role: UserRole!
  restaurants: [Restaurant!]!
}

enum UserRole {
  client
  owner
  delivery
}

type Restaurant {
  id: Float!
  createdAt: Float!
  updatedAt: Float!
  name: String!
  coverImage: String!
  address: String!
  category: Category
  user: User!
}

type AllCategoriesOutput {
  error: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  category: Category
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  restaurants: [Restaurant!]
}

type SerachRestaurantOutput {
  error: String
  ok: Boolean!
  totalPages: Float
  restaurants: [Restaurant!]
}

type UpdateRestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

type UserOutput {
  error: String
  ok: Boolean!
  user: User
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type UpdateUserOutput {
  error: String
  ok: Boolean!
  user: User
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}

type Query {
  getRestaurant(data: RestaurantInput!): RestaurantOutput!
  restaurants(data: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(data: SearchRestaurantInput!): SerachRestaurantOutput!
  allCategories: AllCategoriesOutput!
  getCategory(data: CategoryInput!): CategoryOutput!
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  users: [User!]!
}

input RestaurantInput {
  restaurantId: Float!
}

input RestaurantsInput {
  page: Float = 1
}

input SearchRestaurantInput {
  page: Float = 1
  query: String!
}

input CategoryInput {
  page: Float = 1
  slug: String!
}

type Mutation {
  createRestaurant(data: CreateRestaurantInput!): CreateRestaurantOutput!
  updateRestaurant(id: Float!, data: UpdateRestaurantInput!): UpdateRestaurantOutput!
  deleteRestaurant(data: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createUser(data: UserInput!): UserOutput!
  verifyEmail(data: VerifyEmailInput!): VerifyEmailOutput!
  login(data: LoginInput!): LoginOutput!
  updateUser(id: Float!, data: UpdateUserInputType!): UpdateUserOutput!
}

input CreateRestaurantInput {
  name: String!
  coverImage: String!
  address: String!
  categoryName: String!
}

input UpdateRestaurantInput {
  name: String
  coverImage: String
  address: String
  categoryName: String
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input UserInput {
  email: String!
  password: String!
  role: UserRole!
}

input VerifyEmailInput {
  code: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UpdateUserInputType {
  email: String
  password: String
  role: UserRole
}
